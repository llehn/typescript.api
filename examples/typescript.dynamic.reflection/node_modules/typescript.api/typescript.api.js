var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Units) {
            var Diagnostic = (function () {
                function Diagnostic(type, path, text, message) {
                    this.type = type;
                    this.path = path;
                    this.text = text;
                    this.message = message;
                    this.line_index = 0;
                    this.char_index = 0;
                }
                Diagnostic.prototype.computeLineInfo = function (content, start) {
                    for(var i = 0; i < start; i++) {
                        var ch = content[i];
                        if (ch == '\r\n') {
                            this.line_index += 1;
                            this.char_index = 0;
                            i += 1;
                        }
                        if (ch == '\n') {
                            this.line_index += 1;
                            this.char_index = 0;
                        }
                        this.char_index += 1;
                    }
                };
                Diagnostic.prototype.toString = function () {
                    return this.path + " [" + (this.line_index + 1).toString() + ":" + (this.char_index + 1).toString() + "] " + this.message;
                };
                return Diagnostic;
            })();
            Units.Diagnostic = Diagnostic;            
        })(Api.Units || (Api.Units = {}));
        var Units = Api.Units;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Units) {
            var Unit = (function () {
                function Unit(path, content, diagnostics) {
                    this.path = path;
                    this.content = content;
                    this.diagnostics = diagnostics;
                }
                Unit.prototype.hasError = function () {
                    if (this.diagnostics) {
                        return this.diagnostics.length > 0;
                    }
                    return false;
                };
                return Unit;
            })();
            Units.Unit = Unit;            
        })(Api.Units || (Api.Units = {}));
        var Units = Api.Units;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Units) {
            var SourceUnit = (function (_super) {
                __extends(SourceUnit, _super);
                function SourceUnit(path, content, diagnostics, remote) {
                    _super.call(this, path, content, diagnostics);
                    this.remote = remote;
                }
                SourceUnit.prototype.references = function () {
                    var result = [];
                    if (this.content) {
                        var lines = this.content.split('\r\n');
                        if (lines.length === 1) {
                            lines = this.content.split('\n');
                        }
                        for(var n in lines) {
                            var reference_pattern = /^(\/\/\/\s*<reference\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/gim;
                            var match = reference_pattern.exec(lines[n]);
                            if (match) {
                                result.unshift(match[3]);
                            }
                        }
                    }
                    return result;
                };
                return SourceUnit;
            })(Units.Unit);
            Units.SourceUnit = SourceUnit;            
        })(Api.Units || (Api.Units = {}));
        var Units = Api.Units;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (IO) {
            var Buffer = (function () {
                function Buffer() { }
                Buffer.process = function process(buffer) {
                    switch(buffer[0]) {
                        case 0xFE:
                            if (buffer[1] == 0xFF) {
                                var i = 0;
                                while((i + 1) < buffer.length) {
                                    var temp = buffer[i];
                                    buffer[i] = buffer[i + 1];
                                    buffer[i + 1] = temp;
                                    i += 2;
                                }
                                return buffer.toString("ucs2", 2);
                            }
                            break;
                        case 0xFF:
                            if (buffer[1] == 0xFE) {
                                return buffer.toString("ucs2", 2);
                            }
                            break;
                        case 0xEF:
                            if (buffer[1] == 0xBB) {
                                return buffer.toString("utf8", 3);
                            }
                    }
                    return buffer.toString();
                };
                return Buffer;
            })();
            IO.Buffer = Buffer;            
        })(Api.IO || (Api.IO = {}));
        var IO = Api.IO;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (IO) {
            var _fs = require('fs');
            var IOSync = (function () {
                function IOSync() { }
                IOSync.prototype.readFile = function (path, callback) {
                    try  {
                        var data = _fs.readFileSync(path);
                        callback(new TypeScript.Api.Units.SourceUnit(path, TypeScript.Api.IO.Buffer.process(data), [], false));
                    } catch (exception) {
                        var text = "could not resolve source unit.";
                        var message = "could not resolve source unit " + path + ".";
                        var diagnostic = new TypeScript.Api.Units.Diagnostic("resolve", path, text, message);
                        callback(new TypeScript.Api.Units.SourceUnit(path, null, [
                            diagnostic
                        ], false));
                    }
                };
                return IOSync;
            })();
            IO.IOSync = IOSync;            
        })(Api.IO || (Api.IO = {}));
        var IO = Api.IO;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (IO) {
            var _fs = require('fs');
            var IOAsync = (function () {
                function IOAsync() { }
                IOAsync.prototype.readFile = function (path, callback) {
                    _fs.readFile(path, function (error, data) {
                        if (error) {
                            var text = "could not resolve source unit.";
                            var message = "could not resolve source unit " + path + ".";
                            var diagnostic = new TypeScript.Api.Units.Diagnostic("resolve", path, text, message);
                            callback(new TypeScript.Api.Units.SourceUnit(path, null, [
                                diagnostic
                            ], false));
                        } else {
                            callback(new TypeScript.Api.Units.SourceUnit(path, TypeScript.Api.IO.Buffer.process(data), [], false));
                        }
                    });
                };
                return IOAsync;
            })();
            IO.IOAsync = IOAsync;            
        })(Api.IO || (Api.IO = {}));
        var IO = Api.IO;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (IO) {
            var _fs = require('fs');
            var _url = require('url');
            var _http = require('http');
            var _https = require('https');
            var IORemoteAsync = (function () {
                function IORemoteAsync() { }
                IORemoteAsync.prototype.readFile = function (path, callback) {
                    if (this.isUrl(path)) {
                        this.readFileFromHttp(path, callback);
                        return;
                    }
                    this.readFileFromDisk(path, callback);
                };
                IORemoteAsync.prototype.readFileFromDisk = function (path, callback) {
                    _fs.readFile(path, function (error, data) {
                        if (error) {
                            var text = "could not resolve source unit.";
                            var message = "could not resolve source unit " + path + ".";
                            var diagnostic = new TypeScript.Api.Units.Diagnostic("resolve", path, text, message);
                            callback(new TypeScript.Api.Units.SourceUnit(path, null, [
                                diagnostic
                            ], false));
                        } else {
                            callback(new TypeScript.Api.Units.SourceUnit(path, TypeScript.Api.IO.Buffer.process(data), [], false));
                        }
                    });
                };
                IORemoteAsync.prototype.readFileFromHttp = function (path, callback) {
                    var url = _url.parse(path);
                    var protocol = _http;
                    var options = {
                        host: url.host,
                        port: url.port,
                        path: url.path,
                        method: 'GET'
                    };
                    if (this.isHTTPS(path)) {
                        protocol = _https;
                        options.port = 443;
                    }
                    var request = protocol.request(options, function (response) {
                        var data = [];
                        response.on('data', function (chunk) {
                            data.push(chunk);
                        });
                        response.on('end', function () {
                            callback(new TypeScript.Api.Units.SourceUnit(path, TypeScript.Api.IO.Buffer.process(data.join('')), [], true));
                        });
                    });
                    request.on('error', function (error) {
                        var text = "could not resolve source unit.";
                        var message = "could not resolve source unit " + path + ".";
                        var diagnostic = new TypeScript.Api.Units.Diagnostic("resolve", path, text, message);
                        callback(new TypeScript.Api.Units.SourceUnit(path, null, [
                            diagnostic
                        ], true));
                    });
                    request.end();
                };
                IORemoteAsync.prototype.isHTTPS = function (path) {
                    if (path.indexOf('https://') == 0) {
                        return true;
                    }
                    return false;
                };
                IORemoteAsync.prototype.isUrl = function (path) {
                    var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp[s]?:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");
                    return regex.test(path);
                };
                return IORemoteAsync;
            })();
            IO.IORemoteAsync = IORemoteAsync;            
        })(Api.IO || (Api.IO = {}));
        var IO = Api.IO;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Loggers) {
            var NullLogger = (function () {
                function NullLogger() { }
                NullLogger.prototype.information = function () {
                    return false;
                };
                NullLogger.prototype.debug = function () {
                    return false;
                };
                NullLogger.prototype.warning = function () {
                    return false;
                };
                NullLogger.prototype.error = function () {
                    return false;
                };
                NullLogger.prototype.fatal = function () {
                    return false;
                };
                NullLogger.prototype.log = function (s) {
                };
                return NullLogger;
            })();
            Loggers.NullLogger = NullLogger;            
        })(Api.Loggers || (Api.Loggers = {}));
        var Loggers = Api.Loggers;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Loggers) {
            var ConsoleLogger = (function () {
                function ConsoleLogger() { }
                ConsoleLogger.prototype.information = function () {
                    return false;
                };
                ConsoleLogger.prototype.debug = function () {
                    return false;
                };
                ConsoleLogger.prototype.warning = function () {
                    return false;
                };
                ConsoleLogger.prototype.error = function () {
                    return false;
                };
                ConsoleLogger.prototype.fatal = function () {
                    return false;
                };
                ConsoleLogger.prototype.log = function (s) {
                    console.log(s);
                };
                return ConsoleLogger;
            })();
            Loggers.ConsoleLogger = ConsoleLogger;            
        })(Api.Loggers || (Api.Loggers = {}));
        var Loggers = Api.Loggers;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Writers) {
            var TextWriter = (function () {
                function TextWriter() {
                    this.buffer = [];
                    this.temp = "";
                }
                TextWriter.prototype.Write = function (text) {
                    this.temp += text;
                };
                TextWriter.prototype.WriteLine = function (text) {
                    this.buffer.push(this.temp + text);
                    this.temp = "";
                };
                TextWriter.prototype.Close = function () {
                    if (this.temp.length > 0) {
                        this.buffer.push(this.temp);
                    }
                    this.temp = "";
                };
                TextWriter.prototype.toString = function () {
                    return this.buffer.join('\n');
                };
                return TextWriter;
            })();
            Writers.TextWriter = TextWriter;            
        })(Api.Writers || (Api.Writers = {}));
        var Writers = Api.Writers;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Loggers) {
            var BufferedLogger = (function () {
                function BufferedLogger() {
                    this.writer = new TypeScript.Api.Writers.TextWriter();
                }
                BufferedLogger.prototype.information = function () {
                    return false;
                };
                BufferedLogger.prototype.debug = function () {
                    return false;
                };
                BufferedLogger.prototype.warning = function () {
                    return false;
                };
                BufferedLogger.prototype.error = function () {
                    return false;
                };
                BufferedLogger.prototype.fatal = function () {
                    return false;
                };
                BufferedLogger.prototype.log = function (s) {
                    this.writer.WriteLine(s);
                };
                BufferedLogger.prototype.toString = function () {
                    return this.writer.toString();
                };
                return BufferedLogger;
            })();
            Loggers.BufferedLogger = BufferedLogger;            
        })(Api.Loggers || (Api.Loggers = {}));
        var Loggers = Api.Loggers;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Util) {
            var _path = require("path");
            var Path = (function () {
                function Path() { }
                Path.isAbsoluteUrl = function isAbsoluteUrl(path) {
                    var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp[s]?:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");
                    return regex.test(path);
                };
                Path.isAbsoluteUrn = function isAbsoluteUrn(path) {
                    var regex = new RegExp("^(?:[a-xA-Z]:(/|\))|(?:file://)");
                    return regex.test(path);
                };
                Path.isRootRelative = function isRootRelative(path) {
                    return path.indexOf('/') == 0 && path.indexOf('//') != 0;
                };
                Path.isRelative = function isRelative(path) {
                    if (!Path.isAbsoluteUrl(path)) {
                        if (!Path.isAbsoluteUrn(path)) {
                            if (!(path.indexOf('/') == 0)) {
                                return true;
                            }
                        }
                    }
                    return false;
                };
                Path.toForwardSlashes = function toForwardSlashes(path) {
                    return path.replace(/\\/gi, "/");
                };
                Path.relativeToAbsolute = function relativeToAbsolute(absolute_parent_path, relative_path) {
                    if (Path.isRelative(relative_path)) {
                        var absolute_parent_directory = _path.dirname(absolute_parent_path);
                        return _path.join(absolute_parent_directory, relative_path);
                    }
                    return relative_path;
                };
                return Path;
            })();
            Util.Path = Path;            
        })(Api.Util || (Api.Util = {}));
        var Util = Api.Util;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Resolve) {
            var LoadParameter = (function () {
                function LoadParameter(parent_filename, filename) {
                    this.parent_filename = parent_filename;
                    this.filename = Api.Util.Path.relativeToAbsolute(parent_filename, filename);
                }
                return LoadParameter;
            })();
            Resolve.LoadParameter = LoadParameter;            
        })(Api.Resolve || (Api.Resolve = {}));
        var Resolve = Api.Resolve;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Resolve) {
            var Resolver = (function () {
                function Resolver(io, logger) {
                    this.io = io;
                    this.logger = logger;
                    this.pending = [];
                    this.closed = [];
                    this.units = [];
                }
                Resolver.prototype.resolve = function (sources, callback) {
                    for(var n in sources) {
                        var parameter = new TypeScript.Api.Resolve.LoadParameter(process.mainModule.filename, sources[n]);
                        this.pending.push(parameter);
                    }
                    this.load(callback);
                };
                Resolver.prototype.load = function (callback) {
                    var _this = this;
                    var parameter = this.pending.pop();
                    if (!this.visited(parameter)) {
                        this.closed.push(parameter);
                        this.io.readFile(parameter.filename, function (unit) {
                            if (unit.diagnostics.length == 0) {
                                for(var n in unit.references()) {
                                    var parameter = new TypeScript.Api.Resolve.LoadParameter(unit.path, unit.references()[n]);
                                    _this.pending.push(parameter);
                                }
                            }
                            _this.units.push(unit);
                            _this.next(callback);
                        });
                    } else {
                        this.next(callback);
                    }
                };
                Resolver.prototype.next = function (callback) {
                    if (this.pending.length > 0) {
                        this.load(callback);
                    } else {
                        this.units.reverse();
                        callback(this.units);
                    }
                };
                Resolver.prototype.visited = function (parameter) {
                    for(var n in this.closed) {
                        if (this.closed[n].filename == parameter.filename) {
                            return true;
                        }
                    }
                    return false;
                };
                return Resolver;
            })();
            Resolve.Resolver = Resolver;            
        })(Api.Resolve || (Api.Resolve = {}));
        var Resolve = Api.Resolve;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Units) {
            var CompiledUnit = (function (_super) {
                __extends(CompiledUnit, _super);
                function CompiledUnit(path, content, diagnostics, ast) {
                    _super.call(this, path, content, diagnostics);
                    this.ast = ast;
                }
                return CompiledUnit;
            })(Units.Unit);
            Units.CompiledUnit = CompiledUnit;            
        })(Api.Units || (Api.Units = {}));
        var Units = Api.Units;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Compile) {
            var Emitter = (function () {
                function Emitter() {
                    this.files = [];
                }
                Emitter.prototype.createFile = function (path, useUTF8) {
                    this.files[path] = new TypeScript.Api.Writers.TextWriter();
                    return this.files[path];
                };
                Emitter.prototype.directoryExists = function (path) {
                    return true;
                };
                Emitter.prototype.fileExists = function (path) {
                    return true;
                };
                Emitter.prototype.resolvePath = function (path) {
                    return '/';
                };
                return Emitter;
            })();
            Compile.Emitter = Emitter;            
        })(Api.Compile || (Api.Compile = {}));
        var Compile = Api.Compile;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Compile) {
            var Compiler = (function () {
                function Compiler(logger) {
                    this.logger = logger;
                    var settings = new TypeScript.CompilationSettings();
                    settings.codeGenTarget = TypeScript.LanguageVersion.EcmaScript5;
                    settings.moduleGenTarget = TypeScript.ModuleGenTarget.Synchronous;
                    settings.disallowBool = true;
                    this.compiler = new TypeScript.TypeScriptCompiler(new TypeScript.Api.Loggers.NullLogger(), settings, TypeScript.diagnosticMessages);
                    this.compiler.logger = new TypeScript.Api.Loggers.NullLogger();
                }
                Compiler.prototype.addSourceUnit = function (sourceUnit) {
                    if (!sourceUnit.hasError()) {
                        var snapshot = TypeScript.ScriptSnapshot.fromString(sourceUnit.content);
                        var references = TypeScript.getReferencedFiles(sourceUnit.path, snapshot);
                        this.compiler.addSourceUnit(sourceUnit.path, snapshot, 0, false, references);
                    }
                };
                Compiler.prototype.syntaxCheck = function (sourceUnit) {
                    var result = [];
                    var _diagnostics = this.compiler.getSyntacticDiagnostics(sourceUnit.path);
                    for(var n in _diagnostics) {
                        var diagnostic = new TypeScript.Api.Units.Diagnostic("syntax", _diagnostics[n].fileName(), _diagnostics[n].text(), _diagnostics[n].message());
                        diagnostic.computeLineInfo(sourceUnit.content, _diagnostics[n].start());
                        result.push(diagnostic);
                    }
                    return result;
                };
                Compiler.prototype.typeCheck = function (sourceUnit) {
                    var result = [];
                    this.compiler.pullTypeCheck();
                    var _diagnostics = this.compiler.getSemanticDiagnostics(sourceUnit.path);
                    for(var n in _diagnostics) {
                        var diagnostic = new TypeScript.Api.Units.Diagnostic("typecheck", _diagnostics[n].fileName(), _diagnostics[n].text(), _diagnostics[n].message());
                        diagnostic.computeLineInfo(sourceUnit.content, _diagnostics[n].start());
                        result.push(diagnostic);
                    }
                    return result;
                };
                Compiler.prototype.emitUnits = function (sourceUnits) {
                    var emitter_io_map = [];
                    var emitter = new TypeScript.Api.Compile.Emitter();
                    this.compiler.emitAll(emitter, function (inputFile, outputFile) {
                        emitter_io_map[outputFile] = inputFile;
                    });
                    var result = [];
                    for(var file in emitter.files) {
                        var document = this.compiler.getDocument(emitter_io_map[file]);
                        if (document) {
                            var sourceUnit;
                            for(var n in sourceUnits) {
                                if (sourceUnits[n].path == emitter_io_map[file]) {
                                    sourceUnit = sourceUnits[n];
                                }
                            }
                            if (sourceUnit) {
                                var path = sourceUnit.path;
                                var content = emitter.files[file].toString();
                                var diagnostics = sourceUnit.diagnostics;
                                var ast = document.script;
                                result.push(new TypeScript.Api.Units.CompiledUnit(path, content, diagnostics, ast));
                            }
                        }
                    }
                    return result;
                };
                Compiler.prototype.compile = function (sourceUnits, callback) {
                    for(var n in sourceUnits) {
                        this.addSourceUnit(sourceUnits[n]);
                    }
                    for(var n in sourceUnits) {
                        var syntax_diagnostics = this.syntaxCheck(sourceUnits[n]);
                        for(var m in syntax_diagnostics) {
                            sourceUnits[n].diagnostics.push(syntax_diagnostics);
                        }
                    }
                    for(var n in sourceUnits) {
                        var typecheck_diagnostics = this.typeCheck(sourceUnits[n]);
                        for(var m in typecheck_diagnostics) {
                            sourceUnits[n].diagnostics.push(typecheck_diagnostics);
                        }
                    }
                    var compiledUnits = this.emitUnits(sourceUnits);
                    callback(compiledUnits);
                };
                return Compiler;
            })();
            Compile.Compiler = Compiler;            
        })(Api.Compile || (Api.Compile = {}));
        var Compile = Api.Compile;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Ast) {
            var ASTWalker = (function () {
                function ASTWalker() {
                    this.stack = [];
                    this.userdata = null;
                    this.callback = function (sender, ast) {
                    };
                }
                ASTWalker.prototype.walk_varstatement = function (ast) {
                    if (ast.declaration) {
                        if (ast.declaration.declarators) {
                            this.callback(this, ast);
                            this.stack.push(ast);
                            this.walk_ast_array(ast.declaration.declarators.members);
                            this.stack.pop();
                        }
                    }
                };
                ASTWalker.prototype.walk_type_ref = function (ast) {
                    this.callback(this, ast);
                };
                ASTWalker.prototype.walk_parameter = function (ast) {
                    this.callback(this, ast);
                    if (ast.typeExpr) {
                        this.stack.push(ast);
                        this.walk_ast(ast.typeExpr);
                        this.stack.pop();
                    } else {
                        this.stack.push(ast);
                        this.walk_ast(ast.id);
                        this.stack.pop();
                    }
                };
                ASTWalker.prototype.walk_vardecl = function (ast) {
                    this.callback(this, ast);
                    if (ast.typeExpr) {
                        this.stack.push(ast);
                        this.walk_ast(ast.typeExpr);
                        this.stack.pop();
                    } else {
                        this.stack.push(ast);
                        this.walk_ast(ast.id);
                        this.stack.pop();
                    }
                };
                ASTWalker.prototype.walk_funcdecl = function (ast) {
                    this.callback(this, ast);
                    this.stack.push(ast);
                    this.walk_astlist(ast.arguments);
                    this.stack.pop();
                };
                ASTWalker.prototype.walk_classdecl = function (ast) {
                    this.callback(this, ast);
                    this.stack.push(ast);
                    this.walk_ast(ast.members);
                    this.stack.pop();
                };
                ASTWalker.prototype.walk_interface = function (ast) {
                    this.callback(this, ast);
                    this.stack.push(ast);
                    this.walk_ast(ast.members);
                    this.stack.pop();
                };
                ASTWalker.prototype.walk_module = function (ast) {
                    this.callback(this, ast);
                    this.stack.push(ast);
                    this.walk_astlist(ast.members);
                    this.stack.pop();
                };
                ASTWalker.prototype.walk_import = function (ast) {
                    this.callback(this, ast);
                };
                ASTWalker.prototype.walk_script = function (ast) {
                    this.callback(this, ast);
                    this.stack.push(ast);
                    this.walk_ast_array(ast.moduleElements.members);
                    this.stack.pop();
                };
                ASTWalker.prototype.walk_astlist = function (ast) {
                    for(var n in ast.members) {
                        this.walk_ast(ast.members[n]);
                    }
                };
                ASTWalker.prototype.walk_ast = function (ast) {
                    switch(ast.nodeType) {
                        case TypeScript.NodeType.List:
                            this.walk_astlist(ast);
                            break;
                        case TypeScript.NodeType.Script:
                            this.walk_script(ast);
                            break;
                        case TypeScript.NodeType.ModuleDeclaration:
                            this.walk_module(ast);
                            break;
                        case TypeScript.NodeType.InterfaceDeclaration:
                            this.walk_interface(ast);
                            break;
                        case TypeScript.NodeType.VariableDeclarator:
                            this.walk_vardecl(ast);
                            break;
                        case TypeScript.NodeType.VariableStatement:
                            this.walk_varstatement(ast);
                            break;
                        case TypeScript.NodeType.ClassDeclaration:
                            this.walk_classdecl(ast);
                            break;
                        case TypeScript.NodeType.FunctionDeclaration:
                            this.walk_funcdecl(ast);
                            break;
                        case TypeScript.NodeType.Parameter:
                            this.walk_parameter(ast);
                            break;
                        case TypeScript.NodeType.ImportDeclaration:
                            this.walk_import(ast);
                            break;
                        case TypeScript.NodeType.TypeRef:
                            this.walk_type_ref(ast);
                            break;
                    }
                };
                ASTWalker.prototype.walk_ast_array = function (ast_array) {
                    for(var n in ast_array) {
                        this.walk_ast(ast_array[n]);
                    }
                };
                ASTWalker.prototype.walk = function (ast, callback) {
                    this.callback = callback;
                    this.stack = [];
                    this.walk_ast(ast);
                };
                return ASTWalker;
            })();
            Ast.ASTWalker = ASTWalker;            
        })(Api.Ast || (Api.Ast = {}));
        var Ast = Api.Ast;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Import = (function () {
                function Import() { }
                Import.create = function create(ast) {
                    var result = new Import();
                    result.name = ast.id.text;
                    result.alias = ast.getAliasName(ast);
                    return result;
                };
                return Import;
            })();
            Reflect.Import = Import;            
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Type = (function () {
                function Type() {
                    this.name = "any";
                    this.arguments = [];
                    this.arrayCount = 0;
                }
                Type.qualifyName = function qualifyName(ast) {
                    var result = [];
                    var walk = function (ast) {
                        switch(ast.nodeType) {
                            case TypeScript.NodeType.Name:
                                var name = ast;
                                result.push(name.text);
                                break;
                            case TypeScript.NodeType.MemberAccessExpression:
                                var expression = ast;
                                walk(expression.operand1);
                                walk(expression.operand2);
                                break;
                            case TypeScript.NodeType.TypeRef:
                                var type_reference = ast;
                                walk(type_reference.term);
                                break;
                            case TypeScript.NodeType.GenericType:
                                var generic_type = ast;
                                var expression = generic_type.name;
                                if (expression.nodeType == TypeScript.NodeType.Name) {
                                    walk(expression);
                                }
                                if (expression.nodeType == TypeScript.NodeType.MemberAccessExpression) {
                                    walk(expression.operand1);
                                    walk(expression.operand2);
                                }
                                break;
                            default:
                                result.push("any");
                                break;
                        }
                    };
                    walk(ast);
                    return result.join('.');
                };
                Type.create = function create(ast) {
                    var create_type = function (typeRef) {
                        var type = new Type();
                        type.name = Type.qualifyName(typeRef);
                        type.arrayCount = typeRef.arrayCount;
                        if (typeRef.term.nodeType == TypeScript.NodeType.GenericType) {
                            var genericType = typeRef.term;
                            for(var n in genericType.typeArguments.members) {
                                var typeRef = genericType.typeArguments.members[n];
                                type.arguments.push(create_type(typeRef));
                            }
                        }
                        return type;
                    };
                    var create_generic_type = function (genericType) {
                        var type = new Type();
                        type.name = Type.qualifyName(genericType);
                        for(var n in genericType.typeArguments.members) {
                            var typeRef = genericType.typeArguments.members[n];
                            type.arguments.push(create_type(typeRef));
                        }
                        return type;
                    };
                    var type = null;
                    switch(ast.nodeType) {
                        case TypeScript.NodeType.GenericType:
                            type = create_generic_type(ast);
                            break;
                        case TypeScript.NodeType.TypeRef:
                            type = create_type(ast);
                            break;
                    }
                    return type;
                };
                return Type;
            })();
            Reflect.Type = Type;            
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Parameter = (function () {
                function Parameter() { }
                Parameter.create = function create(ast) {
                    var result = new Parameter();
                    result.name = ast.id.text;
                    if (!ast.typeExpr) {
                        result.type = new TypeScript.Api.Reflect.Type();
                    }
                    return result;
                };
                return Parameter;
            })();
            Reflect.Parameter = Parameter;            
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Method = (function () {
                function Method() {
                    this.parameters = [];
                    this.comments = [];
                }
                Method.create = function create(ast) {
                    var result = new Method();
                    result.name = ast.isConstructor ? "constructor" : ast.getNameText();
                    result.isConstructor = ast.isConstructor;
                    result.isStatic = ast.isStatic();
                    result.isSignature = ast.isSignature();
                    result.isCallMember = ast.isCallMember();
                    result.isDeclaration = ast.isDeclaration();
                    result.isExpression = ast.isExpression();
                    result.isGetAccessor = ast.isGetAccessor();
                    result.isSetAccessor = ast.isSetAccessor();
                    result.isIndexer = ast.isIndexerMember();
                    var comments = ast.getDocComments();
                    for(var n in comments) {
                        result.comments.push(comments[n].content);
                    }
                    if (ast.returnTypeAnnotation) {
                        var type_reference = ast.returnTypeAnnotation;
                        result.returns = TypeScript.Api.Reflect.Type.create(type_reference);
                    } else {
                        result.returns = new TypeScript.Api.Reflect.Type();
                    }
                    return result;
                };
                return Method;
            })();
            Reflect.Method = Method;            
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Variable = (function () {
                function Variable() {
                    this.comments = [];
                }
                Variable.create = function create(ast) {
                    var result = new Variable();
                    result.name = ast.id.text;
                    result.isProperty = ast.isProperty();
                    result.isStatic = ast.isStatic();
                    result.isStatement = ast.isStatement();
                    result.isExpression = ast.isExpression();
                    result.isExported = ast.isExported();
                    result.isStatementOrExpression = ast.isStatementOrExpression();
                    var comments = ast.getDocComments();
                    for(var n in comments) {
                        result.comments.push(comments[n].content);
                    }
                    if (!ast.typeExpr) {
                        result.type = new TypeScript.Api.Reflect.Type();
                    }
                    return result;
                };
                return Variable;
            })();
            Reflect.Variable = Variable;            
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Interface = (function () {
                function Interface() {
                    this.methods = [];
                    this.variables = [];
                    this.extends = [];
                    this.parameters = [];
                }
                Interface.create = function create(ast) {
                    var result = new Interface();
                    result.name = ast.name.text;
                    if (ast.typeParameters) {
                        if (ast.typeParameters.members) {
                            for(var n in ast.typeParameters.members) {
                                result.parameters.push(ast.typeParameters.members[n].name.text);
                            }
                        }
                    }
                    if (ast.extendsList) {
                        if (ast.extendsList.members) {
                            for(var n in ast.extendsList.members) {
                                var type = TypeScript.Api.Reflect.Type.create(ast.extendsList.members[n]);
                                result.extends.push(type);
                            }
                        }
                    }
                    return result;
                };
                return Interface;
            })();
            Reflect.Interface = Interface;            
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Class = (function () {
                function Class() {
                    this.methods = [];
                    this.variables = [];
                    this.extends = [];
                    this.implements = [];
                    this.parameters = [];
                }
                Class.create = function create(ast) {
                    var result = new Class();
                    result.name = ast.name.text;
                    if (ast.typeParameters) {
                        if (ast.typeParameters.members) {
                            for(var n in ast.typeParameters.members) {
                                result.parameters.push(ast.typeParameters.members[n].name.text);
                            }
                        }
                    }
                    if (ast.implementsList) {
                        if (ast.implementsList.members) {
                            for(var n in ast.implementsList.members) {
                                var type = TypeScript.Api.Reflect.Type.create(ast.implementsList.members[n]);
                                result.implements.push(type);
                            }
                        }
                    }
                    if (ast.extendsList) {
                        if (ast.extendsList.members) {
                            for(var n in ast.extendsList.members) {
                                var type = TypeScript.Api.Reflect.Type.create(ast.extendsList.members[n]);
                                result.extends.push(type);
                            }
                        }
                    }
                    return result;
                };
                return Class;
            })();
            Reflect.Class = Class;            
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Module = (function () {
                function Module() {
                    this.imports = [];
                    this.modules = [];
                    this.interfaces = [];
                    this.classes = [];
                    this.methods = [];
                    this.variables = [];
                }
                Module.create = function create(ast) {
                    var result = new Module();
                    result.name = ast.prettyName;
                    return result;
                };
                return Module;
            })();
            Reflect.Module = Module;            
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Script = (function () {
                function Script() {
                    this.modules = [];
                    this.interfaces = [];
                    this.classes = [];
                    this.methods = [];
                    this.variables = [];
                }
                Script.create = function create(path, ast) {
                    var result = new Script();
                    result.path = path;
                    return result;
                };
                return Script;
            })();
            Reflect.Script = Script;            
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        (function (Reflect) {
            var Reflection = (function () {
                function Reflection() {
                    this.scripts = [];
                }
                Reflection.create = function create(compiledUnits) {
                    var reflection = new TypeScript.Api.Reflect.Reflection();
                    var walker = new TypeScript.Api.Ast.ASTWalker();
                    walker.userdata = [];
                    walker.userdata.push(reflection);
                    for(var n in compiledUnits) {
                        walker.walk(compiledUnits[n].ast, function (walker, ast) {
                            if (walker.stack.length < walker.userdata.length - 1) {
                                do {
                                    walker.userdata.pop();
                                } while(walker.stack.length < walker.userdata.length - 1);
                            }
                            var parent = walker.userdata[walker.userdata.length - 1];
                            switch(ast.nodeType) {
                                case TypeScript.NodeType.VariableDeclarator:
                                    var variable = Reflect.Variable.create(ast);
                                    parent.variables.push(variable);
                                    walker.userdata.push(variable);
                                    break;
                                case TypeScript.NodeType.TypeRef:
                                    var type = Reflect.Type.create(ast);
                                    parent.type = type;
                                    walker.userdata.push(type);
                                    break;
                                case TypeScript.NodeType.Parameter:
                                    var parameter = Reflect.Parameter.create(ast);
                                    parent.parameters.push(parameter);
                                    walker.userdata.push(parameter);
                                    break;
                                case TypeScript.NodeType.FunctionDeclaration:
                                    var method = Reflect.Method.create(ast);
                                    parent.methods.push(method);
                                    walker.userdata.push(method);
                                    break;
                                case TypeScript.NodeType.ClassDeclaration:
                                    var _class = Reflect.Class.create(ast);
                                    parent.classes.push(_class);
                                    walker.userdata.push(_class);
                                    break;
                                case TypeScript.NodeType.InterfaceDeclaration:
                                    var _interface = Reflect.Interface.create(ast);
                                    parent.interfaces.push(_interface);
                                    walker.userdata.push(_interface);
                                    break;
                                case TypeScript.NodeType.ImportDeclaration:
                                    var _import = Reflect.Import.create(ast);
                                    parent.imports.push(_import);
                                    walker.userdata.push(_import);
                                    break;
                                case TypeScript.NodeType.ModuleDeclaration:
                                    var _module = Reflect.Module.create(ast);
                                    parent.modules.push(_module);
                                    walker.userdata.push(_module);
                                    break;
                                case TypeScript.NodeType.Script:
                                    var _script = Reflect.Script.create(compiledUnits[n].path, ast);
                                    parent.scripts.push(_script);
                                    walker.userdata.push(_script);
                                    break;
                            }
                        });
                    }
                    return reflection;
                };
                return Reflection;
            })();
            Reflect.Reflection = Reflection;            
        })(Api.Reflect || (Api.Reflect = {}));
        var Reflect = Api.Reflect;
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
