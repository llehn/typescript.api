






var _vm = require("vm");
var _fs = require("fs");
var _path = require("path");
exports.include_lib_declaration = false;
exports.include_node_declaration = false;
exports.allowRemote = false;
exports.debug = false;
function check(units) {
    for(var n in units) {
        if (units[n].hasError()) {
            return false;
        }
    }
    return true;
}
exports.check = check;
function register() {
    require.extensions['.ts'] = function (_module) {
        var output_diagnostics = function (units) {
            for(var n in units) {
                for(var m in units[n].diagnostics) {
                    console.log(units[n].diagnostics[m].toString());
                }
            }
        };
        var api = load_typescript_api();
        var io = new api.IO.IOSync();
        var logger = new api.Loggers.BufferedLogger();
        var resolver = new api.Resolve.Resolver(io, logger);
        var diagnostics = [];
        resolver.resolve([
            _module.filename
        ], function (sourceUnits) {
            if (exports.check(sourceUnits)) {
                var compiler = new api.Compile.Compiler(logger);
                compiler.compile(include_declarations(sourceUnits), function (compiledUnits) {
                    if (exports.check(compiledUnits)) {
                        exports.run(compiledUnits, null, function (context) {
                            _module.exports = context;
                        });
                    } else {
                        output_diagnostics(compiledUnits);
                    }
                });
            } else {
                output_diagnostics(sourceUnits);
            }
        });
    };
}
exports.register = register;
function create(path, content) {
    var api = load_typescript_api();
    return new api.Units.SourceUnit(path, content, [], false);
}
exports.create = create;
function resolve(sources, callback) {
    var getType = function (obj) {
        return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    };
    var _sources = [];
    switch(getType(sources)) {
        case "string":
            _sources.push(sources);
            break;
        case "array":
            _sources = sources;
            break;
    }
    var api = load_typescript_api();
    var io = new api.IO.IOAsync();
    var logger = new api.Loggers.NullLogger();
    if (exports.allowRemote) {
        io = new api.IO.IORemoteAsync();
    }
    if (exports.debug) {
        logger = new api.Loggers.ConsoleLogger();
    }
    var resolver = new api.Resolve.Resolver(io, logger);
    resolver.resolve(_sources, callback);
}
exports.resolve = resolve;
function compile(sourceUnits, callback) {
    var api = load_typescript_api();
    var logger = new api.Loggers.NullLogger();
    if (exports.debug) {
        logger = new api.Loggers.ConsoleLogger();
    }
    var compiler = new api.Compile.Compiler(logger);
    compiler.compile(include_declarations(sourceUnits), callback);
}
exports.compile = compile;
function reflect(compiledUnits, callback) {
    var api = load_typescript_api();
    var reflection = api.Reflect.Reflection.create(compiledUnits);
    callback(reflection);
}
exports.reflect = reflect;
function run(compiledUnits, sandbox, callback) {
    try  {
        if (!sandbox) {
            sandbox = get_default_sandbox();
        }
        var sources = [];
        for(var n in compiledUnits) {
            sources.push(compiledUnits[n].content);
        }
        var script = _vm.createScript(sources.join(''), "typescript-compilation.js");
        script.runInNewContext(sandbox);
        callback(sandbox.exports);
    } catch (e) {
        callback(null);
        console.log(e);
    }
}
exports.run = run;
function get_default_sandbox() {
    var sandbox = {};
    if (!sandbox) {
        sandbox = {};
        for(var n in global) {
            sandbox[n] = global[n];
        }
    }
    sandbox.require = require;
    sandbox.process = process;
    sandbox.console = console;
    sandbox.global = global;
    sandbox.__dirname = _path.dirname(process.mainModule.filename);
    sandbox.__filename = _path.join(sandbox.__dirname, "typescript-compilation.js");
    sandbox.exports = {};
    return sandbox;
}
function include_declarations(units) {
    if (exports.include_lib_declaration) {
        var lib_decl = exports.create('lib.d.ts', _fs.readFileSync(_path.join(__dirname, "decl/lib.d.ts"), "utf8"));
        units.unshift(lib_decl);
    }
    if (exports.include_node_declaration) {
        var node_decl = exports.create('node.d.ts', _fs.readFileSync(_path.join(__dirname, "decl/node.d.ts"), "utf8"));
        units.unshift(node_decl);
    }
    return units;
}
function api_namespace() {
    return load_typescript_api();
}
exports.api_namespace = api_namespace;
function typescript_namespace() {
    return load_typescript();
}
exports.typescript_namespace = typescript_namespace;
var typescript_filename = _path.join(__dirname, "typescript.js");
var typescript_api_filename = _path.join(__dirname, "typescript.api.js");
var _cache_typescript_namespace = null;
var _cache_typescript_api_namespace = null;
function load_typescript_api() {
    if (_cache_typescript_api_namespace) {
        return _cache_typescript_api_namespace;
    }
    var sandbox = {
        TypeScript: load_typescript(),
        __filename: __filename,
        __dirname: __dirname,
        global: global,
        process: process,
        require: require,
        console: console,
        exports: null
    };
    _cache_typescript_api_namespace = load_module(typescript_api_filename, sandbox, [
        "TypeScript"
    ]).Api;
    return _cache_typescript_api_namespace;
}
function load_typescript() {
    if (_cache_typescript_namespace) {
        return _cache_typescript_namespace;
    }
    var sandbox = {
        exports: null
    };
    _cache_typescript_namespace = load_module(typescript_filename, sandbox, [
        "TypeScript"
    ]);
    return _cache_typescript_namespace;
}
function load_module(filename, sandbox, export_type_names) {
    var source = _fs.readFileSync(filename, 'utf8');
    for(var n in export_type_names) {
        source = source.concat('\n\nexports = ' + export_type_names[n] + ';');
    }
    var script = _vm.createScript(source, "typescript.js");
    script.runInNewContext(sandbox);
    return sandbox.exports;
}
