{
  "name": "typescript.api",
  "version": "0.2.1",
  "description": "A compiler as a service api enabling nodejs developers to resolve, compile, reflect and run typescript 0.9 source files.",
  "main": "index.js",
  "directories": {},
  "dependencies": {},
  "devDependencies": {},
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "https://github.com/sinclairzx81/typescript.api.git"
  },
  "keywords": [
    "typescript",
    "compiler",
    "require"
  ],
  "author": {
    "name": "sinclair"
  },
  "license": "Apache License, Version 2.0",
  "readmeFilename": "readme.md",
  "readme": "# typescript.api\r\n\r\nA compiler as a service api enabling nodejs developers to resolve, compile, reflect and run typescript 0.9 source files.\r\n\r\n## install\r\n\r\n```javascript\r\nnpm install typescript.api\r\n```\r\n\r\n## compiler version\r\n\r\nTypeScript 0.9 alpha\r\n\r\n## quick start\r\n\r\n### registering typescript extension\r\n\r\nThe following will register the *.ts extension with require(). When calls to require() are made\r\nto *.ts files, any source resolution and/or compilation errors will be written out to the console\r\nby default.\r\n\r\nIf resolution or compilation errors do exist, the call to require() will return an empty object.\r\n\r\n```javascript\r\nrequire(\"typescript.api\").register();\r\n\r\nvar program = require(\"./program.ts\");\r\n```\r\n\r\n### manual compilation\r\n\r\nThe following is an example of using the api to compile a source file named 'program.ts'. \r\n\r\nThe process will first resolve 'program.ts' and all its referenced sources files. The resolved \r\nsources (units) then checked prior to being sent to the compiler for compilation. Once compiled,\r\nthe compilation is checked again for problems prior to being run.\r\n\r\n```javascript\r\nvar typescript = require(\"typescript.api\");\r\n\r\n// show diagnostic errors.\r\nfunction show_diagnostics (units) {\r\n\r\n\tfor(var n in units) {\r\n\t\r\n\t\tfor(var m in units[n].diagnostics) {\r\n\t\t\r\n\t\t\tconsole.log( units[n].diagnostics[m].toString() );\r\n\t\t}\r\n\t}\r\n}\r\n\r\ntypescript.resolve(['./program.ts'], function(units) {\r\n\t\r\n\tif(!typescript.check(units)) {\r\n\t\r\n\t\tshow_diagnostics(units);\r\n\t}\r\n\telse {\r\n\t\t\r\n\t\ttypescript.compile(units, function(compilation) {\r\n\t\t\t\r\n\t\t\tif(!typescript.check(compilation)) {\r\n\t\t\t\r\n\t\t\t\tshow_diagnostics (compilation);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\t\t\t\r\n\t\t\t\ttypescript.run(compilation, null, function(context) {\r\n\t\t\t\t\r\n\t\t\t\t\t // exports are available on the context...\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});\r\n```\r\n\r\n## reference\r\n\r\n### typescript.resolve (sources, callback)\r\n\r\nWill resolve source units by traversing each source files reference element.\r\n\r\n__arguments__\r\n\r\n* sources - A filename, or a array of filenames to resolve. \r\n* callback(units) - A callback with the resolved units.\r\n\r\n__example__\r\n\r\nThe following will resolve 'program.ts' and log each referenced source file to \r\nthe console.\r\n\r\n```javascript\r\nvar typescript = require(\"typescript.api\");\r\n\r\ntypescript.resolve([\"program.ts\"], function(units) { \r\n\r\n\tfor(var n in units) {\r\n\t\r\n\t\tconsole.log( units[n].path );\r\n\t\t\r\n\t\tconsole.log( units[n].content );\r\n\t\t\r\n\t\tfor(var m in units[n].references) {\r\n\t\t\r\n\t\t\tconsole.log( units[n].references[m] )\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n});\r\n```\r\n\r\n### typescript.check (units)\r\n\r\nChecks source units for diagnostic errors. \r\n\r\n__arguments__\r\n\r\n* units - units to be checked. \r\n* returns - true if ok. \r\n\r\n__example__\r\n\r\nThe following example will check if both a resolve() and compile() is successful.\r\n\r\n```javascript\r\nvar typescript = require(\"typescript.api\");\r\n\r\ntypescript.resolve([\"program.ts\"], function(units) { \r\n\r\n\tif(typescript.check (units)) {\r\n\t\t\r\n\t\ttypescript.compile(units, function(compilation) {\r\n\t\t\r\n\t\t\tif( typescript.check (compilation) ) {\r\n\t\t\t\r\n\t\t\t\ttypescript.run(compilation, null, function(context) {\r\n\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});\r\n```\r\n\r\n### typescript.create ( filename, code )\r\n\r\nWill create a unit from the supplied filename and source code.\r\n\r\n__arguments__\r\n\r\n* filename - A filename that other units can reference.\r\n* code - The source code for this unit.\r\n\r\n__example__\r\n\r\nThe following will create a unit. and send to the compiler for compilation. \r\nThe compilation is then run.\r\n\r\n```javascript\r\nvar typescript = require(\"typescript.api\");\r\n\r\nvar unit = typescript.create(\"temp.ts\", \"console.log('hello world');\");\r\n\r\ntypescript.compile([unit], function(compilation) {\r\n\r\n\ttypescript.run(compilation, null, function(context) { \r\n\t\t\r\n\t\t// will output hello world..\r\n\t});\r\n\t\r\n});\r\n```\r\n\r\n### typescript.compile ( units, callback )\r\n\r\nCompiles source units. \r\n\r\n__arguments__\r\n\r\n* units - An array of source units. \r\n* callback - A callback that passes the compiled output.\r\n\r\n__example__\r\n\r\nThe following will first create and compile a unit, and compiled source is\r\nwritten to the console.\r\n\r\n```javascript\r\nvar typescript = require(\"typescript.api\");\r\n\r\nvar unit = typescript.create(\"temp.ts\", \"var value:number = 123;\");\r\n\r\ntypescript.compile([unit], function(compilation) {\r\n\r\n\tfor(var n in compilation){\r\n\t\r\n\t\tconsole.log(compilation[n].content);\r\n\t}\r\n});\r\n```\r\n\r\n### typescript.reflect ( compilation, callback )\r\n\r\nReflects compilation AST and produces meta data about the modules, classes, \r\nmethods and variables contained within the compilation. \r\n\r\n__arguments__\r\n\r\n* units - The compilation to be reflected. \r\n* callback - A callback that passes the reflected metadata.\r\n\r\n__example__\r\n\r\nThe following will resolve the source file 'program.ts', compile it, then reflect its\r\nmeta data to the console as a JSON string.\r\n\r\n```javascript\r\nvar typescript = require(\"typescript.api\");\r\n\r\ntypescript.resolve(['program.ts'], function(units){\r\n\r\n\ttypescript.compile(units, function(compilation) {\r\n\t\t\r\n\t\ttypescript.reflect(compilation, function(reflection) {\r\n\t\t\t\r\n\t\t\tvar json = JSON.stringify(reflection, null, ' ');\r\n\t\t\t\r\n\t\t\tconsole.log(json);\r\n\t\t});\r\n\t});\r\n});\r\n```\r\n\r\n### typescript.run ( compilation, sandbox, callback )\r\n\r\nRuns a compilation. \r\n\r\n__arguments__\r\n\r\n* compilation - The compilation to be run.\r\n* sandbox - A sandbox. pass null to inherit the current sandbox.\r\n* callback - A callback that passes a context containing any exported variables and function.\r\n\r\n__example__\r\n\r\nThe following will first create and compile a unit, then send it off\r\nfor compilation.\r\n\r\n```javascript\t\r\nvar typescript = require(\"typescript.api\");\t\r\n\r\nvar unit = typescript.create(\"temp.ts\", \"export var value:number = 123;\");\r\n\r\ntypescript.compile([unit], function(compilation) {\r\n\r\n\ttypescript.run(compilation, null, function(context) { \r\n\t\r\n\t\tconsole.log(context.value);\r\n\t\t\r\n\t});\r\n});\r\n```\r\n",
  "_id": "typescript.api@0.2.1",
  "_from": "typescript.api"
}
