





var _vm = require("vm");
var _fs = require("fs");
var _path = require("path");
exports.debug = false;
exports.allowRemote = true;
var units = (function () {
    function units() { }
    units.create = function create(filename, source) {
        var api = load_typescript_api();
        var unit = new api.SourceUnit();
        unit.content = source;
        unit.path = filename;
        unit.remote = false;
        unit.error = '';
        unit.load_references();
        return unit;
    };
    units.resolve = function resolve(sources, callback) {
        var api = load_typescript_api();
        var async_io = new api.IOAsyncHost();
        var logger = new api.NullLogger();
        if (exports.allowRemote) {
            async_io = new api.IOAsyncRemoteHost();
        }
        if (exports.debug) {
            logger = new api.ConsoleLogger();
        }
        var resolver = new api.CodeResolver(async_io, logger);
        resolver.resolve(sources, callback);
    };
    return units;
})();
exports.units = units;
function compile(units, callback) {
    var api = load_typescript_api();
    var typescript = load_typescript();
    var a = exports.units.create('lib.d.ts', _fs.readFileSync(_path.join(__dirname, "decl/lib.d.ts"), "utf8"));
    var b = exports.units.create('node.d.ts', _fs.readFileSync(_path.join(__dirname, "decl/node.d.ts"), "utf8"));
    units.unshift(b);
    units.unshift(a);
    var logger = new api.NullLogger();
    if (exports.debug) {
        logger = new api.ConsoleLogger();
    }
    var compiler = new api.Compiler(logger);
    compiler.compile(units, callback);
}
exports.compile = compile;
function run(compilation, sandbox, callback) {
    try  {
        if (!sandbox) {
            sandbox = get_default_sandbox();
        }
        var source = compilation.scripts.join('');
        var script = _vm.createScript(source, "compilation.js");
        script.runInNewContext(sandbox);
        callback(sandbox.exports);
    } catch (e) {
        callback(null);
        console.log(e);
    }
}
exports.run = run;
function get_default_sandbox() {
    var sandbox = {};
    if (!sandbox) {
        sandbox = {};
        for(var n in global) {
            sandbox[n] = global[n];
        }
    }
    sandbox.require = require;
    sandbox.process = process;
    sandbox.console = console;
    sandbox.global = global;
    sandbox.exports = {};
    return sandbox;
}
function api_namespace() {
    return load_typescript_api();
}
exports.api_namespace = api_namespace;
function typescript_namespace() {
    return load_typescript();
}
exports.typescript_namespace = typescript_namespace;
var typescript_filename = _path.join(__dirname, "typescript.js");
var typescript_api_filename = _path.join(__dirname, "typescript.api.js");
var __typescript__namespace = null;
var __typescript__api__namespace = null;
function load_typescript_api() {
    if (__typescript__api__namespace) {
        return __typescript__api__namespace;
    }
    var sandbox = {
        TypeScript: load_typescript(),
        __filename: __filename,
        __dirname: __dirname,
        global: global,
        process: process,
        require: require,
        console: console,
        exports: null
    };
    __typescript__api__namespace = load_module(typescript_api_filename, sandbox, [
        "TypeScript"
    ]).Api;
    return __typescript__api__namespace;
}
function load_typescript() {
    if (__typescript__namespace) {
        return __typescript__namespace;
    }
    var sandbox = {
        exports: null
    };
    __typescript__namespace = load_module(typescript_filename, sandbox, [
        "TypeScript"
    ]);
    return __typescript__namespace;
}
function load_module(filename, sandbox, export_type_names) {
    var source = _fs.readFileSync(filename, 'utf8');
    for(var n in export_type_names) {
        source = source.concat('\n\nexports = ' + export_type_names[n] + ';');
    }
    var script = _vm.createScript(source, "typescript.js");
    script.runInNewContext(sandbox);
    return sandbox.exports;
}
