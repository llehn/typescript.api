var TypeScript;
(function (TypeScript) {
    (function (Api) {
        var TextWriter = (function () {
            function TextWriter() {
                this.buffer = [];
                this.temp = "";
            }
            TextWriter.prototype.Write = function (text) {
                this.temp += text;
            };
            TextWriter.prototype.WriteLine = function (text) {
                this.buffer.push(this.temp + text);
                this.temp = "";
            };
            TextWriter.prototype.Close = function () {
                if (this.temp.length > 0) {
                    this.buffer.push(this.temp);
                }
                this.temp = "";
            };
            TextWriter.prototype.ToString = function () {
                return this.buffer.join('\n');
            };
            return TextWriter;
        })();
        Api.TextWriter = TextWriter;        
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        var SourceUnit = (function () {
            function SourceUnit() { }
            SourceUnit.prototype.load_references = function () {
                this.references = [];
                var lines = this.content.split('\r\n');
                if (lines.length === 1) {
                    lines = this.content.split('\n');
                }
                for(var n in lines) {
                    var reference_pattern = /^(\/\/\/\s*<reference\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/gim;
                    var match = reference_pattern.exec(lines[n]);
                    if (match) {
                        this.references.unshift(match[3]);
                    }
                }
            };
            return SourceUnit;
        })();
        Api.SourceUnit = SourceUnit;        
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        var LineInfo = (function () {
            function LineInfo(line_index, char_index) {
                this.line_index = line_index;
                this.char_index = char_index;
            }
            LineInfo.create = function create(unit, diagnostic) {
                var line_index = 0;
                var char_index = 0;
                for(var i = 0; i < diagnostic.start(); i++) {
                    var ch = unit.content[i];
                    if (ch == '\r\n') {
                        line_index += 1;
                        char_index = 0;
                        i += 1;
                    }
                    if (ch == '\n') {
                        line_index += 1;
                        char_index = 0;
                    }
                    char_index += 1;
                }
                return new LineInfo(line_index, char_index);
            };
            return LineInfo;
        })();
        Api.LineInfo = LineInfo;        
        var Diagnostic = (function () {
            function Diagnostic() { }
            Diagnostic.create = function create(type, unit, diagnostic) {
                var result = new Diagnostic();
                result.type = type;
                result.filename = diagnostic.fileName();
                result.text = diagnostic.text();
                result.message = diagnostic.message();
                result.lineinfo = LineInfo.create(unit, diagnostic);
                return result;
            };
            return Diagnostic;
        })();
        Api.Diagnostic = Diagnostic;        
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        var NullLogger = (function () {
            function NullLogger() { }
            NullLogger.prototype.information = function () {
                return false;
            };
            NullLogger.prototype.debug = function () {
                return false;
            };
            NullLogger.prototype.warning = function () {
                return false;
            };
            NullLogger.prototype.error = function () {
                return false;
            };
            NullLogger.prototype.fatal = function () {
                return false;
            };
            NullLogger.prototype.log = function (s) {
            };
            return NullLogger;
        })();
        Api.NullLogger = NullLogger;        
        var BufferedLogger = (function () {
            function BufferedLogger() {
                this.writer = new TypeScript.Api.TextWriter();
            }
            BufferedLogger.prototype.information = function () {
                return false;
            };
            BufferedLogger.prototype.debug = function () {
                return false;
            };
            BufferedLogger.prototype.warning = function () {
                return false;
            };
            BufferedLogger.prototype.error = function () {
                return false;
            };
            BufferedLogger.prototype.fatal = function () {
                return false;
            };
            BufferedLogger.prototype.log = function (s) {
                this.writer.WriteLine(s);
            };
            BufferedLogger.prototype.ToString = function () {
                return this.writer.ToString();
            };
            return BufferedLogger;
        })();
        Api.BufferedLogger = BufferedLogger;        
        var ConsoleLogger = (function () {
            function ConsoleLogger() { }
            ConsoleLogger.prototype.information = function () {
                return false;
            };
            ConsoleLogger.prototype.debug = function () {
                return false;
            };
            ConsoleLogger.prototype.warning = function () {
                return false;
            };
            ConsoleLogger.prototype.error = function () {
                return false;
            };
            ConsoleLogger.prototype.fatal = function () {
                return false;
            };
            ConsoleLogger.prototype.log = function (s) {
                console.log(s);
            };
            return ConsoleLogger;
        })();
        Api.ConsoleLogger = ConsoleLogger;        
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        var _path = require("path");
        var Path = (function () {
            function Path() { }
            Path.isAbsoluteUrl = function isAbsoluteUrl(path) {
                var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp[s]?:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");
                return regex.test(path);
            };
            Path.isAbsoluteUrn = function isAbsoluteUrn(path) {
                var regex = new RegExp("^(?:[a-xA-Z]:(/|\))|(?:file://)");
                return regex.test(path);
            };
            Path.isRootRelative = function isRootRelative(path) {
                return path.indexOf('/') == 0 && path.indexOf('//') != 0;
            };
            Path.isRelative = function isRelative(path) {
                if (!Path.isAbsoluteUrl(path)) {
                    if (!Path.isAbsoluteUrn(path)) {
                        if (!(path.indexOf('/') == 0)) {
                            return true;
                        }
                    }
                }
                return false;
            };
            Path.relativeToAbsolute = function relativeToAbsolute(absolute_parent_path, relative_path) {
                if (Path.isRelative(relative_path)) {
                    var absolute_parent_directory = _path.dirname(absolute_parent_path);
                    return _path.join(absolute_parent_directory, relative_path);
                }
                return relative_path;
            };
            return Path;
        })();
        Api.Path = Path;        
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        var _path = require('path');
        var _fs = require('fs');
        var _http = require('http');
        var _https = require('https');
        var _url = require('url');
        var ResolvedFile = (function () {
            function ResolvedFile() { }
            return ResolvedFile;
        })();
        Api.ResolvedFile = ResolvedFile;        
        var IOAsyncHost = (function () {
            function IOAsyncHost() { }
            IOAsyncHost.prototype.readFile = function (filename, callback) {
                _fs.readFile(filename, function (err, data) {
                    if (!err) {
                        var file = new ResolvedFile();
                        file.path = filename;
                        file.content = processBuffer(data);
                        file.remote = false;
                        callback(file);
                    } else {
                        var file = new ResolvedFile();
                        file.path = filename;
                        file.error = err;
                        file.remote = false;
                        callback(file);
                    }
                });
            };
            return IOAsyncHost;
        })();
        Api.IOAsyncHost = IOAsyncHost;        
        var IOAsyncRemoteHost = (function () {
            function IOAsyncRemoteHost() { }
            IOAsyncRemoteHost.prototype.readFile = function (filename, callback) {
                if (this.isUrl(filename)) {
                    this.readFileFromHttp(filename, callback);
                    return;
                }
                this.readFileFromDisk(filename, callback);
            };
            IOAsyncRemoteHost.prototype.readFileFromDisk = function (filename, callback) {
                _fs.readFile(filename, function (err, data) {
                    if (!err) {
                        var file = new ResolvedFile();
                        file.path = filename;
                        file.content = processBuffer(data);
                        file.remote = false;
                        callback(file);
                    } else {
                        var file = new ResolvedFile();
                        file.path = filename;
                        file.error = err;
                        file.remote = false;
                        callback(file);
                    }
                });
            };
            IOAsyncRemoteHost.prototype.readFileFromHttp = function (filename, callback) {
                var url = _url.parse(filename);
                var protocol = _http;
                var options = {
                    host: url.host,
                    port: url.port,
                    path: url.path,
                    method: 'GET',
                    headers: {}
                };
                if (this.isHTTPS(filename)) {
                    options.port = 443;
                    protocol = _https;
                }
                var request = protocol.request(options, function (response) {
                    var data = [];
                    response.on('data', function (chunk) {
                        data.push(chunk);
                    });
                    response.on('end', function () {
                        var file = new ResolvedFile();
                        file.path = filename;
                        file.remote = true;
                        file.content = data.join('');
                        callback(file);
                    });
                });
                request.on('error', function (err) {
                    var file = new ResolvedFile();
                    file.path = filename;
                    file.error = err;
                    file.remote = true;
                    callback(file);
                });
                request.end();
            };
            IOAsyncRemoteHost.prototype.isHTTPS = function (path) {
                if (path.indexOf('https://') == 0) {
                    return true;
                }
                return false;
            };
            IOAsyncRemoteHost.prototype.isUrl = function (path) {
                var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp[s]?:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");
                return regex.test(path);
            };
            return IOAsyncRemoteHost;
        })();
        Api.IOAsyncRemoteHost = IOAsyncRemoteHost;        
        function processBuffer(buffer) {
            switch(buffer[0]) {
                case 0xFE:
                    if (buffer[1] == 0xFF) {
                        var i = 0;
                        while((i + 1) < buffer.length) {
                            var temp = buffer[i];
                            buffer[i] = buffer[i + 1];
                            buffer[i + 1] = temp;
                            i += 2;
                        }
                        return buffer.toString("ucs2", 2);
                    }
                    break;
                case 0xFF:
                    if (buffer[1] == 0xFE) {
                        return buffer.toString("ucs2", 2);
                    }
                    break;
                case 0xEF:
                    if (buffer[1] == 0xBB) {
                        return buffer.toString("utf8", 3);
                    }
            }
            return buffer.toString();
        }
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        var LoadParameter = (function () {
            function LoadParameter(parent_filename, filename) {
                this.parent_filename = parent_filename;
                this.filename = Api.Path.relativeToAbsolute(parent_filename, filename);
            }
            return LoadParameter;
        })();        
        var CodeResolver = (function () {
            function CodeResolver(io, logger) {
                this.io = io;
                this.logger = logger;
                this.pending = [];
                this.closed = [];
                this.units = [];
            }
            CodeResolver.prototype.resolve = function (sources, callback) {
                for(var n in sources) {
                    var op = new LoadParameter(process.mainModule.filename, sources[n]);
                    this.pending.push(op);
                }
                this.load(callback);
            };
            CodeResolver.prototype.load = function (callback) {
                var _this = this;
                var op = this.pending.pop();
                this.logger.log('[resolving] ' + op.filename);
                if (!this.visited(op)) {
                    this.closed.push(op);
                    this.io.readFile(op.filename, function (file) {
                        if (file.error) {
                            _this.logger.log("[error] cannot load " + file.path);
                            return;
                        }
                        var unit = new Api.SourceUnit();
                        unit.content = file.content;
                        unit.path = file.path;
                        unit.remote = file.remote;
                        unit.error = file.error;
                        unit.load_references();
                        for(var n in unit.references) {
                            var parameter = new LoadParameter(file.path, unit.references[n]);
                            _this.pending.push(parameter);
                        }
                        _this.units.push(unit);
                        _this.next(callback);
                    });
                } else {
                    this.next(callback);
                }
            };
            CodeResolver.prototype.visited = function (op) {
                for(var n in this.closed) {
                    if (this.closed[n].filename == op.filename) {
                        return true;
                    }
                }
                return false;
            };
            CodeResolver.prototype.next = function (callback) {
                if (this.pending.length > 0) {
                    this.load(callback);
                } else {
                    this.units.reverse();
                    callback(this.units);
                }
            };
            return CodeResolver;
        })();
        Api.CodeResolver = CodeResolver;        
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        var Emitter = (function () {
            function Emitter() {
                this.files = [];
            }
            Emitter.prototype.createFile = function (path, useUTF8) {
                this.files[path] = new TypeScript.Api.TextWriter();
                return this.files[path];
            };
            Emitter.prototype.directoryExists = function (path) {
                return true;
            };
            Emitter.prototype.fileExists = function (path) {
                return true;
            };
            Emitter.prototype.resolvePath = function (path) {
                return '/';
            };
            return Emitter;
        })();
        Api.Emitter = Emitter;        
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (Api) {
        var CompiledSourceUnit = (function () {
            function CompiledSourceUnit() { }
            return CompiledSourceUnit;
        })();
        Api.CompiledSourceUnit = CompiledSourceUnit;        
        var Compilation = (function () {
            function Compilation() {
                this.astlist = [];
                this.scripts = [];
                this.diagnostics = [];
            }
            return Compilation;
        })();
        Api.Compilation = Compilation;        
        var Compiler = (function () {
            function Compiler(logger) {
                this.logger = logger;
                var settings = new TypeScript.CompilationSettings();
                settings.codeGenTarget = TypeScript.LanguageVersion.EcmaScript5;
                settings.moduleGenTarget = TypeScript.ModuleGenTarget.Synchronous;
                settings.disallowBool = true;
                this.compiler = new TypeScript.TypeScriptCompiler(this.logger, settings, TypeScript.diagnosticMessages);
                this.compiler.logger = logger;
            }
            Compiler.prototype.compile = function (units, callback) {
                var _this = this;
                var compilation = new Compilation();
                for(var n in units) {
                    var unit = units[n];
                    var snapshot = TypeScript.ScriptSnapshot.fromString(unit.content);
                    var references = TypeScript.getReferencedFiles(unit.path, snapshot);
                    var document = this.compiler.addSourceUnit(unit.path, snapshot, 0, false, references);
                }
                for(var n in units) {
                    var unit = units[n];
                    var diagnostics = this.compiler.getSyntacticDiagnostics(unit.path);
                    for(var m in diagnostics) {
                        compilation.diagnostics.push(Api.Diagnostic.create("syntax", unit, diagnostics[m]));
                    }
                }
                this.compiler.pullTypeCheck();
                var keys = this.compiler.fileNameToDocument.getAllKeys();
                for(var n in keys) {
                    var key = keys[n];
                    var diagnostics = this.compiler.getSemanticDiagnostics(key);
                    for(var m in diagnostics) {
                        compilation.diagnostics.push(Api.Diagnostic.create("typecheck", unit, diagnostics[m]));
                    }
                }
                var emitter = new TypeScript.Api.Emitter();
                this.compiler.emitAll(emitter, function (inputFile, outputFile) {
                    _this.logger.log('[emitting] ' + outputFile);
                });
                compilation.astlist = this.compiler.getScripts();
                for(var n in emitter.files) {
                    compilation.scripts.push(emitter.files[n].ToString());
                }
                callback(compilation);
            };
            return Compiler;
        })();
        Api.Compiler = Compiler;        
    })(TypeScript.Api || (TypeScript.Api = {}));
    var Api = TypeScript.Api;
})(TypeScript || (TypeScript = {}));
