0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files (x86)\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'unpublish',
1 verbose cli   'typescript.api@0.9.0' ]
2 info using npm@1.1.65
3 info using node@v0.8.14
4 verbose node symlink C:\Program Files (x86)\nodejs\\node.exe
5 verbose url raw typescript.api
6 verbose url resolving [ 'https://registry.npmjs.org/', './typescript.api' ]
7 verbose url resolved https://registry.npmjs.org/typescript.api
8 info trying registry request attempt 1 at 08:37:34
9 verbose etag "14ULPO86L56S443CYK1O91PX1"
10 http GET https://registry.npmjs.org/typescript.api
11 http 304 https://registry.npmjs.org/typescript.api
12 silly registry.get cb [ 304,
12 silly registry.get   { server: 'CouchDB/1.3.0 (Erlang OTP/R15B03)',
12 silly registry.get     etag: '"14ULPO86L56S443CYK1O91PX1"',
12 silly registry.get     date: 'Fri, 03 May 2013 20:37:36 GMT',
12 silly registry.get     'content-length': '0' } ]
13 verbose etag typescript.api from cache
14 verbose unpublish removing attachments { shasum: '95b37428cba75ae271076cb213ffa2efe6c12862',
14 verbose unpublish   tarball: 'http://registry.npmjs.org/typescript.api/-/typescript.api-0.9.0.tgz' }
15 info unpublish No versions remain, removing entire package
16 verbose url raw typescript.api/-rev/3-47922245baa384cd90b751f46c0fa069
17 verbose url resolving [ 'https://registry.npmjs.org/',
17 verbose url resolving   './typescript.api/-rev/3-47922245baa384cd90b751f46c0fa069' ]
18 verbose url resolved https://registry.npmjs.org/typescript.api/-rev/3-47922245baa384cd90b751f46c0fa069
19 info trying registry request attempt 1 at 08:37:36
20 http DELETE https://registry.npmjs.org/typescript.api/-rev/3-47922245baa384cd90b751f46c0fa069
21 http 500 https://registry.npmjs.org/typescript.api/-rev/3-47922245baa384cd90b751f46c0fa069
22 info retry will retry, error on last attempt: Error: TypeError {[{<<"stack">>,
22 info retry    <<"diffObj([object Object],(void 0),\"dist-tags.\")@validate_doc_update:48\ndiffObj([object Object],[object Object])@validate_doc_update:61\n([object Object],[object Object],[object Object],[object Object])@validate_doc_update:133\n(function (doc, oldDoc, user, dbCtx) {\nfunction assert(ok, message) {if (!ok) {throw {forbidden: message};}}\n\nif (!user) {throw {unauthorized: \"Please log in before writing to the db\"};}try {require(\"monkeypatch\").patch(Object, Date, Array, String);} catch (er) {assert(false, \"failed monkeypatching\");}try {var semver = require(\"semver\");var valid = require(\"valid\");var deep = require(\"deep\");var deepEquals = deep.deepEquals;} catch (er) {assert(false, \"failed loading modules\");}try {if (oldDoc) {oldDoc.users = oldDoc.users || {};}doc.users = doc.users || {};} catch (er) {assert(false, \"failed checking users\");}try {if (isAdmin()) {return;}} catch (er) {assert(false, \"failed checking admin-ness\");}\nfunction diffObj(o, n, p) {p = p || \"\";var d = [];var seenKeys = [];for (var i in o) {seenKeys.push(i);if (!(i in n)) {d.push(\"Deleted: \" + p + i);}if (typeof o[i] !== typeof n[i]) {d.push(\"Changed Type: \" + p + i);}if (typeof o[i] === \"object\" && o[i] && !n[i]) {d.push(\"Nulled: \" + p + i);}if (typeof o[i] === \"object\" && !o[i] && n[i]) {d.push(\"Un-nulled: \" + p + i);}if (typeof o[i] === \"object\") {d = d.concat(diffObj(o[i], n[i], p + i + \".\"));} else {if (o[i] !== n[i]) {d.push(\"Changed: \" + p + i + \" \" + JSON.stringify(o[i]) + \" -> \" + JSON.stringify(n[i]));}}}for (var i in n) {if (-1 === seenKeys.indexOf(i)) {d.push(\"Added: \" + p + i);}}return d;}\n\ntry {assert(!doc.forbidden || doc._deleted, doc.forbidden);} catch (er) {assert(false, \"failed checking doc.forbidden or doc._deleted\");}try {if (oldDoc && !doc._deleted && deepEquals(doc, oldDoc, [[\"users\", user.name], [\"time\", \"modified\"]])) {return;}} catch (er) {assert(false, \"failed checking starred stuff\");}\nfunction validUser() {if (!oldDoc || !oldDoc.maintainers) {return true;}if (isAdmin()) {return true;}if (typeof oldDoc.maintainers !== \"object\") {return true;}for (var i = 0, l = oldDoc.maintainers.length; i < l; i++) {if (oldDoc.maintainers[i].name === user.name) {return true;}}return false;}\n\n\nfunction isAdmin() {if (dbCtx && dbCtx.admins) {if (dbCtx.admins.names && dbCtx.admins.roles && dbCtx.admins.names.indexOf(user.name) !== -1) {return true;}for (var i = 0; i < user.roles.length; i++) {if (dbCtx.admins.roles.indexOf(user.roles[i]) !== -1) {return true;}}}return user && user.roles.indexOf(\"_admin\") >= 0;}\n\ntry {var vu = validUser();} catch (er) {assert(false, \"problem checking user validity\");}if (!vu) {assert(vu, \"user: \" + user.name + \" not authorized to modify \" + oldDoc.name + \"\\n\" + diffObj(oldDoc, doc).join(\"\\n\"));}if (doc._deleted) {return;}assert(valid.name(doc.name), \"name invalid: \" + doc.name);if (!oldDoc && doc.name !== doc.name.toLowerCase()) {assert(false, \"New packages must have all-lowercase names\");}assert(doc.name === doc._id, \"name must match _id\");assert(!doc.mtime, \"doc.mtime is deprecated\");assert(!doc.ctime, \"doc.ctime is deprecated\");assert(typeof doc.time === \"object\", \"time must be object\");assert(typeof doc['dist-tags'] === \"object\", \"dist-tags must be object\");var versions = doc.versions;assert(typeof versions === \"object\", \"versions must be object\");var latest = doc['dist-tags'].latest;if (latest) {assert(versions[latest], \"dist-tags.latest must be valid version\");}var version = versions[latest];if (version) {if (!version.dist) {assert(false, \"no dist object in \" + latest + \" version\");}if (!version.dist.tarball) {assert(false, \"no tarball in \" + latest + \" version\");}if (!version.dist.shasum) {assert(false, \"no shasum in \" + latest + \" version\");}}for (var v in doc['dist-tags']) {var ver = doc['dist-tags'][v];assert(semver.valid(ver), v + \" version invalid version: \" + ver);assert(versions[ver], v + \" version missing: \" + ver);}var depCount = 0;var maxDeps = 5000;\nfunction ridiculousDeps() {if (++depCount > maxDeps) {assert(false, \"too many deps.  please be less ridiculous.\");}}\n\nfor (var ver in versions) {var version = versions[ver];assert(semver.valid(ver), \"invalid version: \" + ver);assert(typeof version === \"object\", \"version entries must be objects\");assert(version.version === ver, \"version must match: \" + ver);assert(version.name === doc._id, \"version \" + ver + \" has incorrect name: \" + version.name);depCount = 0;for (var dep in version.dependencies || {}) {ridiculousDeps();}for (var dep in version.devDependencies || {}) {ridiculousDeps();}for (var dep in version.optionalDependencies || {}) {ridiculousDeps();}}assert(Array.isArray(doc.maintainers), \"maintainers should be a list of owners\");doc.maintainers.forEach(function (m) {assert(m.name && m.email, \"Maintainer should have name and email: \" + JSON.stringify(m));});var time = doc.time;var c = new Date(Date.parse(time.created)), m = new Date(Date.parse(time.modified));assert(c.toString() !== \"Invalid Date\", \"invalid created time: \" + JSON.stringify(time.created));assert(m.toString() !== \"Invalid Date\", \"invalid modified time: \" + JSON.stringify(time.modified));if (oldDoc && oldDoc.time && oldDoc.time.created && Date.parse(oldDoc.time.created)) {assert(Date.parse(oldDoc.time.created) === Date.parse(time.created), \"created time cannot be changed\");}if (oldDoc && oldDoc.users) {assert(deepEquals(doc.users, oldDoc.users, [[user.name]]), \"you may only alter your own 'star' setting\");}if (doc.url) {assert(false, \"Package redirection has been removed. Please update your publish scripts.\");}if (doc.description) {assert(typeof doc.description === \"string\", \"\\\"description\\\" field must be a string\");}var oldVersions = oldDoc ? oldDoc.versions || {} : {};var oldTime = oldDoc ? oldDoc.time || {} : {};var versions = Object.keys(doc.versions), modified = null;for (var i = 0, l = versions.length; i < l; i++) {var v = versions[i];if (!v) {continue;}assert(doc.time[v], \"must have time entry for \" + v);if (!deepEquals(doc.versions[v], oldVersions[v], [[\"directories\"], [\"deprecated\"]]) && doc.versions[v]) {var t = Date.parse(doc.time[v]), n = Date.now();if (typeof doc.versions[v]._npmUser !== \"object\") {continue;}assert(typeof doc.versions[v]._npmUser === \"object\", \"_npmUser field must be object\\n(You probably need to upgrade your npm version)\");assert(doc.versions[v]._npmUser.name === user.name, \"_npmUser.name must === user.name\");assert(deepEquals(doc.versions[v].maintainers, doc.maintainers), \"modified version 'maintainers' must === doc.maintainers\");var found = false;for (var j = 0, lm = doc.maintainers.length; j < lm; j++) {var m = doc.maintainers[j];if (m.name === doc.versions[v]._npmUser.name) {found = true;break;}}assert(found, \"_npmUser must be a current maintainer.\\n\" + \"maintainers=\" + JSON.stringify(doc.maintainers) + \"\\n\" + \"current user=\" + JSON.stringify(doc.versions[v]._npmUser));} else if (oldTime[v]) {assert(oldTime[v] === doc.time[v], v + \" time should not be modified 1\");}}for (var v in oldTime) {if (doc.versions[v] || !oldVersions[v]) {continue;}assert(doc.time[v] === oldTime[v], v + \" time should not be modified 2\");}},[object Object],[object Array])@/home/ubuntu/hosting/installs/hosting_v1.3.0r1/share/couchdb/server/main.js:1259\n(\"_design/scratch\",[object Array],[object Array])@/home/ubuntu/hosting/installs/hosting_v1.3.0r1/share/couchdb/server/main.js:1505\n()@/home/ubuntu/hosting/installs/hosting_v1.3.0r1/share/couchdb/server/main.js:1550\n@/home/ubuntu/hosting/installs/hosting_v1.3.0r1/share/couchdb/server/main.js:1561\n@:0\n">>}]}: typescript.api/-rev/3-47922245baa384cd90b751f46c0fa069
23 info trying registry request attempt 2 at 08:37:48
24 http DELETE https://registry.npmjs.org/typescript.api/-rev/3-47922245baa384cd90b751f46c0fa069
25 http 500 https://registry.npmjs.org/typescript.api/-rev/3-47922245baa384cd90b751f46c0fa069
26 info retry will retry, error on last attempt: Error: TypeError {[{<<"stack">>,
26 info retry    <<"diffObj([object Object],(void 0),\"dist-tags.\")@validate_doc_update:48\ndiffObj([object Object],[object Object])@validate_doc_update:61\n([object Object],[object Object],[object Object],[object Object])@validate_doc_update:133\n(function (doc, oldDoc, user, dbCtx) {\nfunction assert(ok, message) {if (!ok) {throw {forbidden: message};}}\n\nif (!user) {throw {unauthorized: \"Please log in before writing to the db\"};}try {require(\"monkeypatch\").patch(Object, Date, Array, String);} catch (er) {assert(false, \"failed monkeypatching\");}try {var semver = require(\"semver\");var valid = require(\"valid\");var deep = require(\"deep\");var deepEquals = deep.deepEquals;} catch (er) {assert(false, \"failed loading modules\");}try {if (oldDoc) {oldDoc.users = oldDoc.users || {};}doc.users = doc.users || {};} catch (er) {assert(false, \"failed checking users\");}try {if (isAdmin()) {return;}} catch (er) {assert(false, \"failed checking admin-ness\");}\nfunction diffObj(o, n, p) {p = p || \"\";var d = [];var seenKeys = [];for (var i in o) {seenKeys.push(i);if (!(i in n)) {d.push(\"Deleted: \" + p + i);}if (typeof o[i] !== typeof n[i]) {d.push(\"Changed Type: \" + p + i);}if (typeof o[i] === \"object\" && o[i] && !n[i]) {d.push(\"Nulled: \" + p + i);}if (typeof o[i] === \"object\" && !o[i] && n[i]) {d.push(\"Un-nulled: \" + p + i);}if (typeof o[i] === \"object\") {d = d.concat(diffObj(o[i], n[i], p + i + \".\"));} else {if (o[i] !== n[i]) {d.push(\"Changed: \" + p + i + \" \" + JSON.stringify(o[i]) + \" -> \" + JSON.stringify(n[i]));}}}for (var i in n) {if (-1 === seenKeys.indexOf(i)) {d.push(\"Added: \" + p + i);}}return d;}\n\ntry {assert(!doc.forbidden || doc._deleted, doc.forbidden);} catch (er) {assert(false, \"failed checking doc.forbidden or doc._deleted\");}try {if (oldDoc && !doc._deleted && deepEquals(doc, oldDoc, [[\"users\", user.name], [\"time\", \"modified\"]])) {return;}} catch (er) {assert(false, \"failed checking starred stuff\");}\nfunction validUser() {if (!oldDoc || !oldDoc.maintainers) {return true;}if (isAdmin()) {return true;}if (typeof oldDoc.maintainers !== \"object\") {return true;}for (var i = 0, l = oldDoc.maintainers.length; i < l; i++) {if (oldDoc.maintainers[i].name === user.name) {return true;}}return false;}\n\n\nfunction isAdmin() {if (dbCtx && dbCtx.admins) {if (dbCtx.admins.names && dbCtx.admins.roles && dbCtx.admins.names.indexOf(user.name) !== -1) {return true;}for (var i = 0; i < user.roles.length; i++) {if (dbCtx.admins.roles.indexOf(user.roles[i]) !== -1) {return true;}}}return user && user.roles.indexOf(\"_admin\") >= 0;}\n\ntry {var vu = validUser();} catch (er) {assert(false, \"problem checking user validity\");}if (!vu) {assert(vu, \"user: \" + user.name + \" not authorized to modify \" + oldDoc.name + \"\\n\" + diffObj(oldDoc, doc).join(\"\\n\"));}if (doc._deleted) {return;}assert(valid.name(doc.name), \"name invalid: \" + doc.name);if (!oldDoc && doc.name !== doc.name.toLowerCase()) {assert(false, \"New packages must have all-lowercase names\");}assert(doc.name === doc._id, \"name must match _id\");assert(!doc.mtime, \"doc.mtime is deprecated\");assert(!doc.ctime, \"doc.ctime is deprecated\");assert(typeof doc.time === \"object\", \"time must be object\");assert(typeof doc['dist-tags'] === \"object\", \"dist-tags must be object\");var versions = doc.versions;assert(typeof versions === \"object\", \"versions must be object\");var latest = doc['dist-tags'].latest;if (latest) {assert(versions[latest], \"dist-tags.latest must be valid version\");}var version = versions[latest];if (version) {if (!version.dist) {assert(false, \"no dist object in \" + latest + \" version\");}if (!version.dist.tarball) {assert(false, \"no tarball in \" + latest + \" version\");}if (!version.dist.shasum) {assert(false, \"no shasum in \" + latest + \" version\");}}for (var v in doc['dist-tags']) {var ver = doc['dist-tags'][v];assert(semver.valid(ver), v + \" version invalid version: \" + ver);assert(versions[ver], v + \" version missing: \" + ver);}var depCount = 0;var maxDeps = 5000;\nfunction ridiculousDeps() {if (++depCount > maxDeps) {assert(false, \"too many deps.  please be less ridiculous.\");}}\n\nfor (var ver in versions) {var version = versions[ver];assert(semver.valid(ver), \"invalid version: \" + ver);assert(typeof version === \"object\", \"version entries must be objects\");assert(version.version === ver, \"version must match: \" + ver);assert(version.name === doc._id, \"version \" + ver + \" has incorrect name: \" + version.name);depCount = 0;for (var dep in version.dependencies || {}) {ridiculousDeps();}for (var dep in version.devDependencies || {}) {ridiculousDeps();}for (var dep in version.optionalDependencies || {}) {ridiculousDeps();}}assert(Array.isArray(doc.maintainers), \"maintainers should be a list of owners\");doc.maintainers.forEach(function (m) {assert(m.name && m.email, \"Maintainer should have name and email: \" + JSON.stringify(m));});var time = doc.time;var c = new Date(Date.parse(time.created)), m = new Date(Date.parse(time.modified));assert(c.toString() !== \"Invalid Date\", \"invalid created time: \" + JSON.stringify(time.created));assert(m.toString() !== \"Invalid Date\", \"invalid modified time: \" + JSON.stringify(time.modified));if (oldDoc && oldDoc.time && oldDoc.time.created && Date.parse(oldDoc.time.created)) {assert(Date.parse(oldDoc.time.created) === Date.parse(time.created), \"created time cannot be changed\");}if (oldDoc && oldDoc.users) {assert(deepEquals(doc.users, oldDoc.users, [[user.name]]), \"you may only alter your own 'star' setting\");}if (doc.url) {assert(false, \"Package redirection has been removed. Please update your publish scripts.\");}if (doc.description) {assert(typeof doc.description === \"string\", \"\\\"description\\\" field must be a string\");}var oldVersions = oldDoc ? oldDoc.versions || {} : {};var oldTime = oldDoc ? oldDoc.time || {} : {};var versions = Object.keys(doc.versions), modified = null;for (var i = 0, l = versions.length; i < l; i++) {var v = versions[i];if (!v) {continue;}assert(doc.time[v], \"must have time entry for \" + v);if (!deepEquals(doc.versions[v], oldVersions[v], [[\"directories\"], [\"deprecated\"]]) && doc.versions[v]) {var t = Date.parse(doc.time[v]), n = Date.now();if (typeof doc.versions[v]._npmUser !== \"object\") {continue;}assert(typeof doc.versions[v]._npmUser === \"object\", \"_npmUser field must be object\\n(You probably need to upgrade your npm version)\");assert(doc.versions[v]._npmUser.name === user.name, \"_npmUser.name must === user.name\");assert(deepEquals(doc.versions[v].maintainers, doc.maintainers), \"modified version 'maintainers' must === doc.maintainers\");var found = false;for (var j = 0, lm = doc.maintainers.length; j < lm; j++) {var m = doc.maintainers[j];if (m.name === doc.versions[v]._npmUser.name) {found = true;break;}}assert(found, \"_npmUser must be a current maintainer.\\n\" + \"maintainers=\" + JSON.stringify(doc.maintainers) + \"\\n\" + \"current user=\" + JSON.stringify(doc.versions[v]._npmUser));} else if (oldTime[v]) {assert(oldTime[v] === doc.time[v], v + \" time should not be modified 1\");}}for (var v in oldTime) {if (doc.versions[v] || !oldVersions[v]) {continue;}assert(doc.time[v] === oldTime[v], v + \" time should not be modified 2\");}},[object Object],[object Array])@/home/ubuntu/hosting/installs/hosting_v1.3.0r1/share/couchdb/server/main.js:1259\n(\"_design/scratch\",[object Array],[object Array])@/home/ubuntu/hosting/installs/hosting_v1.3.0r1/share/couchdb/server/main.js:1505\n()@/home/ubuntu/hosting/installs/hosting_v1.3.0r1/share/couchdb/server/main.js:1550\n@/home/ubuntu/hosting/installs/hosting_v1.3.0r1/share/couchdb/server/main.js:1561\n@:0\n">>}]}: typescript.api/-rev/3-47922245baa384cd90b751f46c0fa069
27 info trying registry request attempt 3 at 08:38:50
28 http DELETE https://registry.npmjs.org/typescript.api/-rev/3-47922245baa384cd90b751f46c0fa069
29 http 500 https://registry.npmjs.org/typescript.api/-rev/3-47922245baa384cd90b751f46c0fa069
30 error Error: TypeError {[{<<"stack">>,
30 error    <<"diffObj([object Object],(void 0),\"dist-tags.\")@validate_doc_update:48\ndiffObj([object Object],[object Object])@validate_doc_update:61\n([object Object],[object Object],[object Object],[object Object])@validate_doc_update:133\n(function (doc, oldDoc, user, dbCtx) {\nfunction assert(ok, message) {if (!ok) {throw {forbidden: message};}}\n\nif (!user) {throw {unauthorized: \"Please log in before writing to the db\"};}try {require(\"monkeypatch\").patch(Object, Date, Array, String);} catch (er) {assert(false, \"failed monkeypatching\");}try {var semver = require(\"semver\");var valid = require(\"valid\");var deep = require(\"deep\");var deepEquals = deep.deepEquals;} catch (er) {assert(false, \"failed loading modules\");}try {if (oldDoc) {oldDoc.users = oldDoc.users || {};}doc.users = doc.users || {};} catch (er) {assert(false, \"failed checking users\");}try {if (isAdmin()) {return;}} catch (er) {assert(false, \"failed checking admin-ness\");}\nfunction diffObj(o, n, p) {p = p || \"\";var d = [];var seenKeys = [];for (var i in o) {seenKeys.push(i);if (!(i in n)) {d.push(\"Deleted: \" + p + i);}if (typeof o[i] !== typeof n[i]) {d.push(\"Changed Type: \" + p + i);}if (typeof o[i] === \"object\" && o[i] && !n[i]) {d.push(\"Nulled: \" + p + i);}if (typeof o[i] === \"object\" && !o[i] && n[i]) {d.push(\"Un-nulled: \" + p + i);}if (typeof o[i] === \"object\") {d = d.concat(diffObj(o[i], n[i], p + i + \".\"));} else {if (o[i] !== n[i]) {d.push(\"Changed: \" + p + i + \" \" + JSON.stringify(o[i]) + \" -> \" + JSON.stringify(n[i]));}}}for (var i in n) {if (-1 === seenKeys.indexOf(i)) {d.push(\"Added: \" + p + i);}}return d;}\n\ntry {assert(!doc.forbidden || doc._deleted, doc.forbidden);} catch (er) {assert(false, \"failed checking doc.forbidden or doc._deleted\");}try {if (oldDoc && !doc._deleted && deepEquals(doc, oldDoc, [[\"users\", user.name], [\"time\", \"modified\"]])) {return;}} catch (er) {assert(false, \"failed checking starred stuff\");}\nfunction validUser() {if (!oldDoc || !oldDoc.maintainers) {return true;}if (isAdmin()) {return true;}if (typeof oldDoc.maintainers !== \"object\") {return true;}for (var i = 0, l = oldDoc.maintainers.length; i < l; i++) {if (oldDoc.maintainers[i].name === user.name) {return true;}}return false;}\n\n\nfunction isAdmin() {if (dbCtx && dbCtx.admins) {if (dbCtx.admins.names && dbCtx.admins.roles && dbCtx.admins.names.indexOf(user.name) !== -1) {return true;}for (var i = 0; i < user.roles.length; i++) {if (dbCtx.admins.roles.indexOf(user.roles[i]) !== -1) {return true;}}}return user && user.roles.indexOf(\"_admin\") >= 0;}\n\ntry {var vu = validUser();} catch (er) {assert(false, \"problem checking user validity\");}if (!vu) {assert(vu, \"user: \" + user.name + \" not authorized to modify \" + oldDoc.name + \"\\n\" + diffObj(oldDoc, doc).join(\"\\n\"));}if (doc._deleted) {return;}assert(valid.name(doc.name), \"name invalid: \" + doc.name);if (!oldDoc && doc.name !== doc.name.toLowerCase()) {assert(false, \"New packages must have all-lowercase names\");}assert(doc.name === doc._id, \"name must match _id\");assert(!doc.mtime, \"doc.mtime is deprecated\");assert(!doc.ctime, \"doc.ctime is deprecated\");assert(typeof doc.time === \"object\", \"time must be object\");assert(typeof doc['dist-tags'] === \"object\", \"dist-tags must be object\");var versions = doc.versions;assert(typeof versions === \"object\", \"versions must be object\");var latest = doc['dist-tags'].latest;if (latest) {assert(versions[latest], \"dist-tags.latest must be valid version\");}var version = versions[latest];if (version) {if (!version.dist) {assert(false, \"no dist object in \" + latest + \" version\");}if (!version.dist.tarball) {assert(false, \"no tarball in \" + latest + \" version\");}if (!version.dist.shasum) {assert(false, \"no shasum in \" + latest + \" version\");}}for (var v in doc['dist-tags']) {var ver = doc['dist-tags'][v];assert(semver.valid(ver), v + \" version invalid version: \" + ver);assert(versions[ver], v + \" version missing: \" + ver);}var depCount = 0;var maxDeps = 5000;\nfunction ridiculousDeps() {if (++depCount > maxDeps) {assert(false, \"too many deps.  please be less ridiculous.\");}}\n\nfor (var ver in versions) {var version = versions[ver];assert(semver.valid(ver), \"invalid version: \" + ver);assert(typeof version === \"object\", \"version entries must be objects\");assert(version.version === ver, \"version must match: \" + ver);assert(version.name === doc._id, \"version \" + ver + \" has incorrect name: \" + version.name);depCount = 0;for (var dep in version.dependencies || {}) {ridiculousDeps();}for (var dep in version.devDependencies || {}) {ridiculousDeps();}for (var dep in version.optionalDependencies || {}) {ridiculousDeps();}}assert(Array.isArray(doc.maintainers), \"maintainers should be a list of owners\");doc.maintainers.forEach(function (m) {assert(m.name && m.email, \"Maintainer should have name and email: \" + JSON.stringify(m));});var time = doc.time;var c = new Date(Date.parse(time.created)), m = new Date(Date.parse(time.modified));assert(c.toString() !== \"Invalid Date\", \"invalid created time: \" + JSON.stringify(time.created));assert(m.toString() !== \"Invalid Date\", \"invalid modified time: \" + JSON.stringify(time.modified));if (oldDoc && oldDoc.time && oldDoc.time.created && Date.parse(oldDoc.time.created)) {assert(Date.parse(oldDoc.time.created) === Date.parse(time.created), \"created time cannot be changed\");}if (oldDoc && oldDoc.users) {assert(deepEquals(doc.users, oldDoc.users, [[user.name]]), \"you may only alter your own 'star' setting\");}if (doc.url) {assert(false, \"Package redirection has been removed. Please update your publish scripts.\");}if (doc.description) {assert(typeof doc.description === \"string\", \"\\\"description\\\" field must be a string\");}var oldVersions = oldDoc ? oldDoc.versions || {} : {};var oldTime = oldDoc ? oldDoc.time || {} : {};var versions = Object.keys(doc.versions), modified = null;for (var i = 0, l = versions.length; i < l; i++) {var v = versions[i];if (!v) {continue;}assert(doc.time[v], \"must have time entry for \" + v);if (!deepEquals(doc.versions[v], oldVersions[v], [[\"directories\"], [\"deprecated\"]]) && doc.versions[v]) {var t = Date.parse(doc.time[v]), n = Date.now();if (typeof doc.versions[v]._npmUser !== \"object\") {continue;}assert(typeof doc.versions[v]._npmUser === \"object\", \"_npmUser field must be object\\n(You probably need to upgrade your npm version)\");assert(doc.versions[v]._npmUser.name === user.name, \"_npmUser.name must === user.name\");assert(deepEquals(doc.versions[v].maintainers, doc.maintainers), \"modified version 'maintainers' must === doc.maintainers\");var found = false;for (var j = 0, lm = doc.maintainers.length; j < lm; j++) {var m = doc.maintainers[j];if (m.name === doc.versions[v]._npmUser.name) {found = true;break;}}assert(found, \"_npmUser must be a current maintainer.\\n\" + \"maintainers=\" + JSON.stringify(doc.maintainers) + \"\\n\" + \"current user=\" + JSON.stringify(doc.versions[v]._npmUser));} else if (oldTime[v]) {assert(oldTime[v] === doc.time[v], v + \" time should not be modified 1\");}}for (var v in oldTime) {if (doc.versions[v] || !oldVersions[v]) {continue;}assert(doc.time[v] === oldTime[v], v + \" time should not be modified 2\");}},[object Object],[object Array])@/home/ubuntu/hosting/installs/hosting_v1.3.0r1/share/couchdb/server/main.js:1259\n(\"_design/scratch\",[object Array],[object Array])@/home/ubuntu/hosting/installs/hosting_v1.3.0r1/share/couchdb/server/main.js:1505\n()@/home/ubuntu/hosting/installs/hosting_v1.3.0r1/share/couchdb/server/main.js:1550\n@/home/ubuntu/hosting/installs/hosting_v1.3.0r1/share/couchdb/server/main.js:1561\n@:0\n">>}]}: typescript.api/-rev/3-47922245baa384cd90b751f46c0fa069
30 error     at RegClient.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:259:14)
30 error     at Request.init.self.callback (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\request\main.js:120:22)
30 error     at Request.EventEmitter.emit (events.js:99:17)
30 error     at Request.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\request\main.js:648:16)
30 error     at Request.EventEmitter.emit (events.js:126:20)
30 error     at IncomingMessage.Request.start.self.req.self.httpModule.request.buffer (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\request\main.js:610:14)
30 error     at IncomingMessage.EventEmitter.emit (events.js:126:20)
30 error     at IncomingMessage._emitEnd (http.js:366:10)
30 error     at HTTPParser.parserOnMessageComplete [as onMessageComplete] (http.js:149:23)
30 error     at CleartextStream.socketOnData [as ondata] (http.js:1367:20)
31 error If you need help, you may report this log at:
31 error     <http://github.com/isaacs/npm/issues>
31 error or email it to:
31 error     <npm-@googlegroups.com>
32 error System Windows_NT 6.1.7601
33 error command "C:\\Program Files (x86)\\nodejs\\\\node.exe" "C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "unpublish" "typescript.api@0.9.0"
34 error cwd E:\development\gold\typescript.api
35 error node -v v0.8.14
36 error npm -v 1.1.65
37 verbose exit [ 1, true ]
